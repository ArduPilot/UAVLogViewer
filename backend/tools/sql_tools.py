import logging
from typing import Dict, Any, List
from openai.types.chat import ChatCompletionMessageParam
from models import Message
from dotenv import load_dotenv
import os
from openai import OpenAI

logging.basicConfig(
            level=logging.DEBUG,
            format='%(levelname)s - %(message)s'
        )

class SQLTools:
    def __init__(self, retry_limit: int = 3):
        
        self.logger = logging.getLogger(__name__)

        # Load environment variables
        load_dotenv()
        self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

        self.RETRY_LIMIT = retry_limit

    def validate_query(self, query: str) -> bool:
        """Validate that the query is safe to execute (read-only)."""
        self.logger.debug(f"Starting query validation for: {query}")
        query = query.lower().strip()
        
        # Check if query starts with SELECT
        if not query.startswith('select'):
            self.logger.warning(f"Query validation failed: Query must start with SELECT")
            return False
            
        forbidden_keywords = ['insert', 'update', 'delete', 'drop', 'alter', 'create', 'truncate']
        
        # Log each forbidden keyword check
        for keyword in forbidden_keywords:
            if keyword in query:
                self.logger.warning(f"Query validation failed: Found forbidden keyword '{keyword}'")
                return False
        
        self.logger.debug("Query validation passed: No forbidden keywords found")
        return True

    def extract_sql_query(self, query: str) -> str:
        """Extract the SQL query from the generated query."""
        self.logger.debug(f"Extracting SQL query from: {query}")
        if "```sql" in query:
            return query.split("```sql")[1].split("```")[0].strip()
        else:
            return ""

    def generate_sql_query(self, system_prompt: str, user_prompt: str, question: str, schema: Dict[str, Any], conversation_history: List[Message], retry_count: int = 0) -> str:
        """Generate SQL query from natural language question."""

        if retry_count >= self.RETRY_LIMIT:
            self.logger.error(f"Failed to generate SQL query after {self.RETRY_LIMIT} attempts")
            raise Exception(f"Failed to generate SQL query after {self.RETRY_LIMIT} attempts")

        self.logger.info(f"Starting SQL query generation for question: {question}")
        self.logger.debug(f"Available tables in schema: {list(schema.keys())}")
        
        try:
            messages: List[ChatCompletionMessageParam] = [
                {"role": "system", "content": system_prompt},
                {"role": "system", "content": f"List of tables: {schema.keys()}\n\nDatabase schema as generated by the query 'PRAGMA table_info(table_name)' for each table:\n{schema}"},
                *[msg.to_openai_message() for msg in conversation_history],
                {"role": "user", "content": f"{user_prompt}"}
            ]
            
            self.logger.debug("Preparing OpenAI API request for SQL query generation")
            self.logger.debug(f"Number of messages in conversation history: {len(conversation_history)}")
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                temperature=0.3,
                max_tokens=500
            )
            
            generated_query = response.choices[0].message.content
            if generated_query is None:
                raise Exception("No content received from OpenAI API")
            generated_query = generated_query.strip()
            final_query = self.extract_sql_query(generated_query)

            if not self.validate_query(final_query):
                self.logger.warning(f"Invalid query generated (attempt {retry_count + 1}/{self.RETRY_LIMIT}): {final_query}")
                conversation_history.append(Message(role="assistant", content=f"Error: Generated query contains forbidden operations. Only SELECT queries are allowed. Please try again."))
                final_query = self.generate_sql_query(system_prompt, user_prompt, question, schema, conversation_history, retry_count + 1)
                return final_query

            self.logger.info(f"Successfully generated SQL query: {final_query}")
            return final_query
        except Exception as e:
            self.logger.error(f"Error generating SQL query: {str(e)}", exc_info=True)
            raise Exception(f"Error generating SQL query: {str(e)}")